// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/chaitin/panda-wiki/config"
	mq3 "github.com/chaitin/panda-wiki/handler/mq"
	"github.com/chaitin/panda-wiki/log"
	"github.com/chaitin/panda-wiki/mq"
	cache2 "github.com/chaitin/panda-wiki/repo/cache"
	mq2 "github.com/chaitin/panda-wiki/repo/mq"
	pg2 "github.com/chaitin/panda-wiki/repo/pg"
	"github.com/chaitin/panda-wiki/store/cache"
	"github.com/chaitin/panda-wiki/store/pg"
	"github.com/chaitin/panda-wiki/store/vector"
	"github.com/chaitin/panda-wiki/store/vector/embedding"
)

// Injectors from wire.go:

func createApp() (*App, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	logger := log.NewLogger(configConfig)
	mqConsumer, err := mq.NewMQConsumer(configConfig, logger)
	if err != nil {
		return nil, err
	}
	db, err := pg.NewDB(configConfig)
	if err != nil {
		return nil, err
	}
	docRepository := pg2.NewDocRepository(db, logger)
	cacheCache, err := cache.NewCache(configConfig)
	if err != nil {
		return nil, err
	}
	expireTaskRepo := cache2.NewExpireTaskRepo(cacheCache)
	mqProducer, err := mq.NewMQProducer(configConfig, logger)
	if err != nil {
		return nil, err
	}
	vectorRepository := mq2.NewVectorRepository(mqProducer)
	docMQHandler, err := mq3.NewDocMQHandler(mqConsumer, docRepository, expireTaskRepo, vectorRepository, logger)
	if err != nil {
		return nil, err
	}
	embeddingEmbedding, err := embedding.NewEmbedding(configConfig, logger)
	if err != nil {
		return nil, err
	}
	vectorStore, err := vector.NewVectorStore(configConfig, logger, embeddingEmbedding)
	if err != nil {
		return nil, err
	}
	vectorMQHandler, err := mq3.NewVectorMQHandler(mqConsumer, logger, vectorStore, docRepository)
	if err != nil {
		return nil, err
	}
	mqHandlers := &mq3.MQHandlers{
		DocMQHandler:    docMQHandler,
		VectorMQHandler: vectorMQHandler,
	}
	app := &App{
		MQConsumer: mqConsumer,
		Config:     configConfig,
		MQHandlers: mqHandlers,
	}
	return app, nil
}

// wire.go:

type App struct {
	MQConsumer mq.MQConsumer
	Config     *config.Config
	MQHandlers *mq3.MQHandlers
}
